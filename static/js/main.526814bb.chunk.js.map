{"version":3,"sources":["Stores/AppContainer.ts","Components/Menu.tsx","APIs/images.ts","Configs/index.ts","Stores/GalleryContainer.ts","Components/Gallery.tsx","Components/Home.tsx","App.tsx","Components/Login.tsx","serviceWorker.js","index.js"],"names":["AppContainer","createContainer","useState","view","setView","localStorage","getItem","auth","setAuth","login","username","password","remember","setItem","navigate","toast","success","error","console","warn","changeView","v","removeItem","AppMenu","props","appContainer","useContainer","Menu","borderless","inverted","map","item","idx","Item","key","name","active","onClick","vertical","fluid","widths","fetchImages","images","timeStamp","Date","getTime","i","url","push","GalleryContainer","initialImages","setImages","loadMore","length","newImages","fetching","Gallery","gallery","handleScroll","bodyHeight","document","body","getBoundingClientRect","height","window","scrollY","innerHeight","setTimeout","useEffect","addEventListener","removeEventListener","cols","isMobile","Grid","columns","src","Column","Image","Home","header","isBrowser","Container","Header","as","textAlign","desktopCSS","css","androidCSS","iOSCSS","StyledApp","styled","div","isAndroid","isIOS","App","location","href","StyledLogin","Login","appCont","setUsername","setPassword","setRemember","size","Segment","Form","onSubmit","Input","label","placeholder","value","onChange","e","Checkbox","checked","Button","type","Boolean","hostname","match","ReactDOM","render","StrictMode","Provider","path","autoClose","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.526814bb.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { createContainer } from 'unstated-next'\nimport { navigate } from \"@reach/router\"\nimport { toast } from 'react-toastify'\n\nconst LOCAL_STORAGE_KEY = '__isAuthed'\n\nconst AppContainer = createContainer(() => {\n  const [view, setView] = useState('home')\n  const [auth, setAuth] = useState(!!localStorage.getItem(LOCAL_STORAGE_KEY))\n\n  const login = (username: string, password: string, remember: boolean) => {\n    // Handling request to server\n    if (username === \"admin\" && password === \"admin\") {\n      setAuth(true)\n      if (remember) {\n        localStorage.setItem(LOCAL_STORAGE_KEY, \"true\")\n      }\n      navigate('/')\n      toast.success(\"Logged in successfully!\")\n    } else {\n      toast.error(\"Wrong username or password!\")\n      console.warn('Wrong username or password')\n    }\n  }\n\n  const logout = () => setAuth(false)\n  const changeView = (v: string) => {\n    if (v === 'logout') {\n      logout()\n      localStorage.removeItem(LOCAL_STORAGE_KEY)\n      navigate('/login')\n    }\n    else {\n      setView(v)\n    }\n  }\n\n  return { view, auth, login, changeView }\n})\n\nexport default AppContainer","import React from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport AppContainer from '../Stores/AppContainer'\n\nconst AppMenu = (props: any) => {\n  const appContainer = AppContainer.useContainer()\n  const { view, changeView } = appContainer\n\n  const menuItems = ['home', 'notifications', 'settings', 'logout']\n\n  return (\n    <Menu borderless inverted {...props}>\n      {\n        menuItems.map((item, idx) => {\n          return <Menu.Item\n            key={idx}\n            name={item}\n            active={view === item}\n            onClick={() => changeView(item)}\n          />\n        }\n        )\n      }\n    </Menu>\n  )\n}\n\nconst Desktop = () => <AppMenu vertical />\nconst Mobile = () => <AppMenu fluid widths={4} />\n\nexport default { Desktop, Mobile }","import { IMAGES_PER_FETCH } from \"../Configs\"\n\n// Request to server\nconst fetchImages: () => string[] = () => {\n  let images: string[] = []\n  const timeStamp = new Date().getTime()\n  for (let i = 0; i < IMAGES_PER_FETCH; i++) {\n    const url = `https://picsum.photos/500?random=${timeStamp + i}`\n    images.push(url)\n  }\n  return images\n}\n\nexport default fetchImages","export const IMAGES_LIMIT = 105\nexport const IMAGES_PER_FETCH = 25","import { useState } from 'react'\nimport { createContainer } from 'unstated-next'\nimport fetchImages from '../APIs/images'\nimport { IMAGES_LIMIT } from '../Configs'\n\nconst GalleryContainer = createContainer(() => {\n  const initialImages = fetchImages()\n  const [images, setImages] = useState(initialImages)\n\n  const loadMore = () => {\n    if (images.length < IMAGES_LIMIT) {\n      const newImages = fetchImages()\n      setImages([...images, ...newImages])\n    }\n  }\n\n  return { images, loadMore }\n})\n\nexport default GalleryContainer\n\n","import React, { useEffect } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { Grid, Image } from 'semantic-ui-react'\nimport GalleryContainer from '../Stores/GalleryContainer'\n\nlet fetching = false\n\nconst Gallery = () => {\n  const gallery = GalleryContainer.useContainer()\n\n  const handleScroll = () => {\n    let bodyHeight = document.body.getBoundingClientRect().height;\n    if (window.scrollY + window.innerHeight >= bodyHeight) {\n      if (!fetching) {\n        gallery.loadMore();\n        fetching = true\n        setTimeout(() => { fetching = false }, 300)\n      }\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  })\n\n  const cols = isMobile ? 1 : 5\n\n  return (\n    <Grid columns={cols}>\n      {\n        gallery.images.map((src, i) => {\n          return <Grid.Column key={i}>\n            <Image src={src} />\n          </Grid.Column>\n        })\n      }\n    </Grid>\n  )\n}\n\n\nexport default Gallery","import React from 'react'\nimport { isBrowser, isMobile } from 'react-device-detect'\nimport { Container, Header } from 'semantic-ui-react'\nimport Menu from '../Components/Menu'\nimport Gallery from './Gallery'\n\nconst Home = ({ view }: { view: string }) => {\n  const header = isBrowser ? 'h1' : 'h2'\n\n  return (\n    <>\n      {isBrowser && <Menu.Desktop />}\n      {isMobile && <Menu.Mobile />}\n      \n      {\n        view === 'home' && <Container>\n          <Header as={header} textAlign=\"center\">Gallery Modal</Header>\n          <Gallery />\n        </Container>\n      }\n      { view === 'notifications' && <Container>Notifications</Container> }\n      { view === 'settings' && <Container>Settings</Container> }\n    </>\n  )\n}\n\nexport default Home","import React from 'react';\nimport { isAndroid, isBrowser, isIOS } from 'react-device-detect';\nimport styled, { css } from 'styled-components';\nimport './App.css';\nimport Home from './Components/Home';\nimport AppContainer from './Stores/AppContainer';\n\nfunction App() {\n  const { auth, view } = AppContainer.useContainer()\n\n  if (!auth) {\n    window.location.href = '/login'\n  } else {\n    return (\n      <StyledApp>\n        <Home view={view}/>\n      </StyledApp>\n    )      \n  }\n}\n\nconst desktopCSS = css`\n  display: flex;\n  flex-direction: row;\n  & > .ui.container {\n    padding: 16px;\n    margin-left: 15rem !important;\n  }\n  \n  > .ui.menu {\n    position: fixed;\n    height: 100vh;\n  }\n`\n\nconst androidCSS = css`\n  > .ui.menu {\n    position: fixed;\n    z-index: 100;\n  }\n\n  > .ui.container {\n    padding-top: 4rem;\n  }\n`\n\nconst iOSCSS = css`\n  > .ui.menu {\n    position: fixed;\n    bottom: 0;\n    z-index: 100;\n  }\n\n  > .ui.container {\n    padding-top: 1rem;\n  }\n`\n\nconst StyledApp = styled.div`\n  ${ isBrowser && desktopCSS}\n  ${ isAndroid && androidCSS}\n  ${ isIOS && iOSCSS}\n`\nexport default App;\n","import React, { useState } from 'react'\nimport { Button, Form, Segment, Header } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport AppContainer from '../Stores/AppContainer'\n\nconst Login = () => {\n  const appCont = AppContainer.useContainer()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [remember, setRemember] = useState(false)\n\n  const handleSubmit = () => {\n    appCont.login(username, password, remember)\n  }\n\n  return (\n    <StyledLogin>\n      <Header as=\"h1\" size=\"large\">Login to view Gallery Modal</Header>\n      <Segment inverted>\n        <Form inverted onSubmit={handleSubmit}>\n          <Form.Input\n            fluid\n            label='Username'\n            placeholder='Username'\n            name='username'\n            value={username}\n            onChange={(e, { value }) => { setUsername(value) }} />\n          <Form.Input\n            fluid\n            label='Password'\n            placeholder='Password'\n            name='password'\n            value={password}\n            onChange={(e, { value }) => { setPassword(value) }} />\n          <Form.Checkbox \n            label='Remember me' \n            checked={remember} \n            onChange={(e, { checked }) => { setRemember(!!checked) }} />\n          <Button type='submit'>Login</Button>\n        </Form>\n      </Segment>\n      <Header as=\"h3\">(Username: admin, password: admin)</Header>\n    </StyledLogin>\n  )\n}\n\nconst StyledLogin = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n\n  .ui.segment {\n    width: 300px;\n  }\n\n  button { float: right; }\n  h3.ui.header {\n    font-style: italic;\n    color: #4686a5;\n  }\n`\n\nexport default Login","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Login from './Components/Login';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\nimport GalleryContainer from './Stores/GalleryContainer';\nimport AppContainer from './Stores/AppContainer';\nimport { Router } from \"@reach/router\"\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer.Provider>\n      <GalleryContainer.Provider>\n        <Router>\n          <App path='/' />\n          <Login path='/login' />\n        </Router>\n        <ToastContainer autoClose={3000} />\n      </GalleryContainer.Provider>\n    </AppContainer.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}